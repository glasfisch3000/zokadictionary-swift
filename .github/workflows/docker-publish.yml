name: Docker

on:
  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: glasfisch3000/zokadictionary-swift


jobs:
  build:

    runs-on: ubuntu-24.04
    container: swift:6.1.0-noble
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install zstd compression algorithm for faster caching
      - name: Install zstd
        run: |
          apt-get update -y
          apt-get install -y zstd

      # Restore cached Swift build artifacts
      - name: Restore .build
        if: ${{ !(github.run_attempt > 1) }}
        id: "restore-build"
        uses: actions/cache/restore@v4
        with:
          path: .build
          key: "swiftpm-build-${{ runner.os }}-${{ github.event.pull_request.base.sha || github.event.after }}"
          restore-keys: "swiftpm-build-${{ runner.os }}-"

      # Build the app since that's not longer happening in the dockerfile
      - name: Build App
        run: |
          apt-get update -y
          apt-get install -y libjemalloc-dev

          # Build the application, with optimizations, with static linking, and using jemalloc
          swift build \
            -c release \
            --product App \
            --static-swift-stdlib \
            -Xlinker -ljemalloc \
            $([ -f ./Package.resolved ] && echo "--force-resolved-versions" || true)

          pwd
          swift build -c release --show-bin-path
          ls -lA $(swift build -c release --show-bin-path)

      # Cache Swift build artifacts
      - name: Cache .build
        if: steps.restore-build.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: .build
          key: "swiftpm-build-${{ runner.os }}-${{ github.event.pull_request.base.sha || github.event.after }}"

      # We need to install docker since we're working in the swift container
      - name: Install Docker
        run: |
          set -eu

          # Installation commands from https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository:

          # Add Docker's official GPG key:
          apt-get update -y
          apt-get install ca-certificates curl gnupg -y
          install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          chmod a+r /etc/apt/keyrings/docker.gpg

          # Add the repository to Apt sources:
          # shellcheck source=/dev/null
          echo \
            "deb [arch=\"$(dpkg --print-architecture)\" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
              \"$(. /etc/os-release && echo "$VERSION_CODENAME")\" stable" |
            tee /etc/apt/sources.list.d/docker.list >/dev/null
          apt-get update -y

          # Install Docker:
          apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: debug checks
        run: |
          pwd
          ls -lA

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          file: ./Dockerfile_workflow
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
